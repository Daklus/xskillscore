{"project": "project", "project_url": "https://github.com/raybellwaves/xskillscore", "show_commit_url": "https://github.com/raybellwaves/xskillscore/commit/", "hash_length": 8, "revision_to_hash": {"100": "35f75fbf1917abf1a4de7dbadf08f3abbd6deaab"}, "revision_to_date": {"100": 1568606223000}, "params": {"arch": ["x86_64"], "cpu": ["Intel(R) Core(TM) i5-8600K CPU @ 3.60GHz"], "machine": ["ray-MS-7B43"], "num_cpu": ["6"], "os": ["Linux 5.0.0-27-generic"], "ram": ["16361736"], "python": ["3.6"], "bottleneck": ["", null], "dask": [""], "numpy": [""], "xarray": [""], "numba": ["", null], "branch": ["master"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "Intel(R) Core(TM) i5-8600K CPU @ 3.60GHz", "machine": "ray-MS-7B43", "num_cpu": "6", "os": "Linux 5.0.0-27-generic", "ram": "16361736", "python": "3.6", "bottleneck": "", "dask": "", "numpy": "", "xarray": "", "branch": "master", "numba": null}, {"arch": "x86_64", "cpu": "Intel(R) Core(TM) i5-8600K CPU @ 3.60GHz", "machine": "ray-MS-7B43", "num_cpu": "6", "os": "Linux 5.0.0-27-generic", "ram": "16361736", "python": "3.6", "bottleneck": "", "dask": "", "numba": "", "numpy": "", "xarray": "", "branch": "master"}, {"arch": "x86_64", "cpu": "Intel(R) Core(TM) i5-8600K CPU @ 3.60GHz", "machine": "ray-MS-7B43", "num_cpu": "6", "os": "Linux 5.0.0-27-generic", "ram": "16361736", "python": "3.6", "dask": "", "numba": "", "numpy": "", "xarray": "", "branch": "master", "bottleneck": null}, {"arch": "x86_64", "cpu": "Intel(R) Core(TM) i5-8600K CPU @ 3.60GHz", "machine": "ray-MS-7B43", "num_cpu": "6", "os": "Linux 5.0.0-27-generic", "ram": "16361736", "python": "3.6", "dask": "", "numpy": "", "xarray": "", "branch": "master", "bottleneck": null, "numba": null}], "benchmarks": {"deterministic.Compute_large.peakmem_xskillscore_metric_large": {"code": "class Compute_large:\n    @parameterized('metric', DETERMINISTIC_METRICS)\n    def peakmem_xskillscore_metric_large(self, metric):\n        dim = 'member'\n        \"\"\"Take memory peak for xskillscore.metric.\"\"\"\n        metric(self.ds['tos'], self.ds['sos'], dim=dim)\n\n    def setup(self, *args, **kwargs):\n        self.ds = xr.open_dataset('large.nc')\n\n    def setup_cache(self, *args, **kwargs):\n        self.make_ds(nmember, large_lon_lat, large_lon_lat)\n        self.ds.to_netcdf('large.nc')", "name": "deterministic.Compute_large.peakmem_xskillscore_metric_large", "param_names": ["m"], "params": [["<function rmse at 0x7f7094953730>", "<function pearson_r at 0x7f7094953620>", "<function mae at 0x7f7094953840>", "<function mse at 0x7f70949537b8>", "<function pearson_r_p_value at 0x7f70949536a8>"]], "setup_cache_key": "/home/ray/Documents/PYTHON_dev/xskillscore/asv_bench/benchmarks/deterministic.py:99", "timeout": 600, "type": "peakmemory", "unit": "bytes", "version": "24f2d4e3d4a6d68865e4e3a5584773ad0093bc907858c362ce42f05b028c57dc"}, "deterministic.Compute_large.time_xskillscore_metric_large": {"code": "class Compute_large:\n    @parameterized('metric', DETERMINISTIC_METRICS)\n    def time_xskillscore_metric_large(self, metric):\n        \"\"\"Take time for xskillscore.metric.\"\"\"\n        dim = 'member'\n        metric(self.ds['tos'], self.ds['sos'], dim=dim)\n\n    def setup(self, *args, **kwargs):\n        self.ds = xr.open_dataset('large.nc')\n\n    def setup_cache(self, *args, **kwargs):\n        self.make_ds(nmember, large_lon_lat, large_lon_lat)\n        self.ds.to_netcdf('large.nc')", "min_run_count": 2, "name": "deterministic.Compute_large.time_xskillscore_metric_large", "number": 0, "param_names": ["m"], "params": [["<function rmse at 0x7f7094953730>", "<function pearson_r at 0x7f7094953620>", "<function mae at 0x7f7094953840>", "<function mse at 0x7f70949537b8>", "<function pearson_r_p_value at 0x7f70949536a8>"]], "processes": 2, "sample_time": 0.01, "setup_cache_key": "/home/ray/Documents/PYTHON_dev/xskillscore/asv_bench/benchmarks/deterministic.py:99", "timeout": 600, "type": "time", "unit": "seconds", "version": "c9238e58919753c2dffa57162ff52a0c6ea6c8d43d710a1ff0fa3e05d6cae4af", "warmup_time": -1}, "deterministic.Compute_large_dask.peakmem_xskillscore_metric_large_dask": {"code": "class Compute_large_dask:\n    @parameterized('metric', DETERMINISTIC_METRICS)\n    def peakmem_xskillscore_metric_large_dask(self, metric):\n        dim = 'member'\n        \"\"\"Take memory peak for xskillscore.metric.\"\"\"\n        metric(self.ds['tos'], self.ds['sos'], dim=dim).compute()\n\n    def setup(self, *args, **kwargs):\n        self.ds = xr.open_dataset(\n            'large.nc', chunks={'lon': large_lon_lat_chunksize}\n        )\n\n    def setup_cache(self, *args, **kwargs):\n        requires_dask()\n        self.make_ds(nmember, large_lon_lat, large_lon_lat)\n        self.ds.to_netcdf('large.nc')", "name": "deterministic.Compute_large_dask.peakmem_xskillscore_metric_large_dask", "param_names": ["m"], "params": [["<function rmse at 0x7f7094953730>", "<function pearson_r at 0x7f7094953620>", "<function mae at 0x7f7094953840>", "<function mse at 0x7f70949537b8>", "<function pearson_r_p_value at 0x7f70949536a8>"]], "setup_cache_key": "/home/ray/Documents/PYTHON_dev/xskillscore/asv_bench/benchmarks/deterministic.py:123", "timeout": 600, "type": "peakmemory", "unit": "bytes", "version": "7c66e1568eb845d2d475362a8019fe170db0974a9b9006f710b1640073957b36"}, "deterministic.Compute_large_dask.time_xskillscore_metric_large_dask": {"code": "class Compute_large_dask:\n    @parameterized('metric', DETERMINISTIC_METRICS)\n    def time_xskillscore_metric_large_dask(self, metric):\n        \"\"\"Take time for xskillscore.metric.\"\"\"\n        dim = 'member'\n        metric(self.ds['tos'], self.ds['sos'], dim=dim).compute()\n\n    def setup(self, *args, **kwargs):\n        self.ds = xr.open_dataset(\n            'large.nc', chunks={'lon': large_lon_lat_chunksize}\n        )\n\n    def setup_cache(self, *args, **kwargs):\n        requires_dask()\n        self.make_ds(nmember, large_lon_lat, large_lon_lat)\n        self.ds.to_netcdf('large.nc')", "min_run_count": 2, "name": "deterministic.Compute_large_dask.time_xskillscore_metric_large_dask", "number": 0, "param_names": ["m"], "params": [["<function rmse at 0x7f7094953730>", "<function pearson_r at 0x7f7094953620>", "<function mae at 0x7f7094953840>", "<function mse at 0x7f70949537b8>", "<function pearson_r_p_value at 0x7f70949536a8>"]], "processes": 2, "sample_time": 0.01, "setup_cache_key": "/home/ray/Documents/PYTHON_dev/xskillscore/asv_bench/benchmarks/deterministic.py:123", "timeout": 600, "type": "time", "unit": "seconds", "version": "18e63a098c1cae5a6f46fbe70b6ae5362ea6072e58753d03fbe3f807ee47fc65", "warmup_time": -1}, "deterministic.Compute_small.peakmem_xskillscore_metric_small": {"code": "class Compute_small:\n    @parameterized('metric', DETERMINISTIC_METRICS)\n    def peakmem_xskillscore_metric_small(self, metric):\n        dim = 'member'\n        \"\"\"Take memory peak for xskillscore.metric.\"\"\"\n        metric(self.ds['tos'], self.ds['sos'], dim=dim)\n\n    def setup(self, *args, **kwargs):\n        self.make_ds(nmember, 90, 45)  # 4 degree grid", "name": "deterministic.Compute_small.peakmem_xskillscore_metric_small", "param_names": ["m"], "params": [["<function rmse at 0x7f7094953730>", "<function pearson_r at 0x7f7094953620>", "<function mae at 0x7f7094953840>", "<function mse at 0x7f70949537b8>", "<function pearson_r_p_value at 0x7f70949536a8>"]], "timeout": 600, "type": "peakmemory", "unit": "bytes", "version": "9a578d1c8ec8abe0d75f80524e5c1b95e63289c4778dcd9e3c344872ed288397"}, "deterministic.Compute_small.time_xskillscore_metric_small": {"code": "class Compute_small:\n    @parameterized('metric', DETERMINISTIC_METRICS)\n    def time_xskillscore_metric_small(self, metric):\n        \"\"\"Take time for xskillscore.metric.\"\"\"\n        dim = 'member'\n        metric(self.ds['tos'], self.ds['sos'], dim=dim)\n\n    def setup(self, *args, **kwargs):\n        self.make_ds(nmember, 90, 45)  # 4 degree grid", "min_run_count": 2, "name": "deterministic.Compute_small.time_xskillscore_metric_small", "number": 0, "param_names": ["m"], "params": [["<function rmse at 0x7f7094953730>", "<function pearson_r at 0x7f7094953620>", "<function mae at 0x7f7094953840>", "<function mse at 0x7f70949537b8>", "<function pearson_r_p_value at 0x7f70949536a8>"]], "processes": 2, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "cba929bac4f6a7693ca430e7f0d1a5b5c14c963a22f9b9203ccf11426f9387e9", "warmup_time": -1}, "probabilistic.Compute_large.peakmem_xskillscore_probabilistic_large": {"code": "class Compute_large:\n    @parameterized('metric', PROBABILISTIC_METRICS)\n    def peakmem_xskillscore_probabilistic_large(self, metric):\n        \"\"\"Take time for xskillscore.metric.\"\"\"\n        if metric is crps_gaussian:\n            mu = 0.5\n            sig = 0.2\n            metric(self.obs['tos'], mu, sig)\n        elif metric is crps_quadrature:\n            if not including_crps_quadrature:\n                pass\n            else:\n                xmin, xmax, tol = -10, 10, 1e-6\n                cdf_or_dist = norm\n                metric(self.obs['tos'], cdf_or_dist, xmin, xmax, tol)\n        elif metric is crps_ensemble:\n            metric(self.obs['tos'], self.fct['tos'])\n        elif metric is threshold_brier_score:\n            threshold = 0.5\n            metric(self.obs['tos'], self.fct['tos'], threshold)\n        elif metric is brier_score:\n            metric(\n                self.obs['tos'] > 0.5, (self.fct['tos'] > 0.5).mean('member')\n            )\n\n    def setup(self, *args, **kwargs):\n        self.make_ds(nmember, large_lon_lat, large_lon_lat)", "name": "probabilistic.Compute_large.peakmem_xskillscore_probabilistic_large", "param_names": ["m"], "params": [["<function xr_crps_ensemble at 0x7f708e9fbc80>", "<function xr_crps_gaussian at 0x7f70a323a400>", "<function xr_crps_quadrature at 0x7f70949538c8>", "<function xr_brier_score at 0x7f708a931a60>", "<function xr_threshold_brier_score at 0x7f708a931730>"]], "timeout": 600, "type": "peakmemory", "unit": "bytes", "version": "c1ef2eb48aab07eb5f8d087f6d9d41f3cac02bd88afc4e047ab0aa1818f2a4fb"}, "probabilistic.Compute_large.time_xskillscore_probabilistic_large": {"code": "class Compute_large:\n    @parameterized('metric', PROBABILISTIC_METRICS)\n    def time_xskillscore_probabilistic_large(self, metric):\n        \"\"\"Take time for xskillscore.metric.\"\"\"\n        if metric is crps_gaussian:\n            mu = 0.5\n            sig = 0.2\n            metric(self.obs['tos'], mu, sig)\n        elif metric is crps_quadrature:\n            if not including_crps_quadrature:\n                pass\n            else:\n                xmin, xmax, tol = -10, 10, 1e-6\n                cdf_or_dist = norm\n                metric(self.obs['tos'], cdf_or_dist, xmin, xmax, tol)\n        elif metric is crps_ensemble:\n            metric(self.obs['tos'], self.fct['tos'])\n        elif metric is threshold_brier_score:\n            threshold = 0.5\n            metric(self.obs['tos'], self.fct['tos'], threshold)\n        elif metric is brier_score:\n            metric(\n                self.obs['tos'] > 0.5, (self.fct['tos'] > 0.5).mean('member')\n            )\n\n    def setup(self, *args, **kwargs):\n        self.make_ds(nmember, large_lon_lat, large_lon_lat)", "min_run_count": 2, "name": "probabilistic.Compute_large.time_xskillscore_probabilistic_large", "number": 0, "param_names": ["m"], "params": [["<function xr_crps_ensemble at 0x7f708e9fbc80>", "<function xr_crps_gaussian at 0x7f70a323a400>", "<function xr_crps_quadrature at 0x7f70949538c8>", "<function xr_brier_score at 0x7f708a931a60>", "<function xr_threshold_brier_score at 0x7f708a931730>"]], "processes": 2, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "7ae6f8f364808995e78127540da036fe38463a7f523ea1bc9e18b63d3b3597e1", "warmup_time": -1}, "probabilistic.Compute_large_dask.peakmem_xskillscore_probabilistic_large_dask": {"code": "class Compute_large_dask:\n    @parameterized('metric', PROBABILISTIC_METRICS)\n    def peakmem_xskillscore_probabilistic_large_dask(self, metric):\n        \"\"\"Take time for xskillscore.metric.\"\"\"\n        if metric is crps_gaussian:\n            mu = 0.5\n            sig = 0.2\n            metric(self.obs['tos'], mu, sig).compute()\n        elif metric is crps_quadrature:\n            if not including_crps_quadrature:\n                pass\n            else:\n                xmin, xmax, tol = -10, 10, 1e-6\n                cdf_or_dist = norm\n                metric(\n                    self.obs['tos'], cdf_or_dist, xmin, xmax, tol\n                ).compute()\n        elif metric is crps_ensemble:\n            metric(self.obs['tos'], self.fct['tos']).compute()\n        elif metric is threshold_brier_score:\n            threshold = 0.5\n            metric(self.obs['tos'], self.fct['tos'], threshold).compute()\n        elif metric is brier_score:\n            metric(\n                self.obs['tos'] > 0.5, (self.fct['tos'] > 0.5).mean('member')\n            ).compute()\n\n    def setup(self, *args, **kwargs):\n        requires_dask()\n        self.make_ds(nmember, large_lon_lat, large_lon_lat)\n        self.obs = self.obs.chunk(\n            {'lon': large_lon_lat_chunksize, 'lat': large_lon_lat_chunksize}\n        )\n        self.fct = self.fct.chunk(\n            {'lon': large_lon_lat_chunksize, 'lat': large_lon_lat_chunksize}\n        )", "name": "probabilistic.Compute_large_dask.peakmem_xskillscore_probabilistic_large_dask", "param_names": ["m"], "params": [["<function xr_crps_ensemble at 0x7f708e9fbc80>", "<function xr_crps_gaussian at 0x7f70a323a400>", "<function xr_crps_quadrature at 0x7f70949538c8>", "<function xr_brier_score at 0x7f708a931a60>", "<function xr_threshold_brier_score at 0x7f708a931730>"]], "timeout": 600, "type": "peakmemory", "unit": "bytes", "version": "b2ebc53b5f557013b8a39c3467b5171d593e11207798ef880be608ca9ce8197c"}, "probabilistic.Compute_large_dask.time_xskillscore_probabilistic_large_dask": {"code": "class Compute_large_dask:\n    @parameterized('metric', PROBABILISTIC_METRICS)\n    def time_xskillscore_probabilistic_large_dask(self, metric):\n        \"\"\"Take time for xskillscore.metric.\"\"\"\n        if metric is crps_gaussian:\n            mu = 0.5\n            sig = 0.2\n            metric(self.obs['tos'], mu, sig).compute()\n        elif metric is crps_quadrature:\n            if not including_crps_quadrature:\n                pass\n            else:\n                xmin, xmax, tol = -10, 10, 1e-6\n                cdf_or_dist = norm\n                metric(\n                    self.obs['tos'], cdf_or_dist, xmin, xmax, tol\n                ).compute()\n        elif metric is crps_ensemble:\n            metric(self.obs['tos'], self.fct['tos']).compute()\n        elif metric is threshold_brier_score:\n            threshold = 0.5\n            metric(self.obs['tos'], self.fct['tos'], threshold).compute()\n        elif metric is brier_score:\n            metric(\n                self.obs['tos'] > 0.5, (self.fct['tos'] > 0.5).mean('member')\n            ).compute()\n\n    def setup(self, *args, **kwargs):\n        requires_dask()\n        self.make_ds(nmember, large_lon_lat, large_lon_lat)\n        self.obs = self.obs.chunk(\n            {'lon': large_lon_lat_chunksize, 'lat': large_lon_lat_chunksize}\n        )\n        self.fct = self.fct.chunk(\n            {'lon': large_lon_lat_chunksize, 'lat': large_lon_lat_chunksize}\n        )", "min_run_count": 2, "name": "probabilistic.Compute_large_dask.time_xskillscore_probabilistic_large_dask", "number": 0, "param_names": ["m"], "params": [["<function xr_crps_ensemble at 0x7f708e9fbc80>", "<function xr_crps_gaussian at 0x7f70a323a400>", "<function xr_crps_quadrature at 0x7f70949538c8>", "<function xr_brier_score at 0x7f708a931a60>", "<function xr_threshold_brier_score at 0x7f708a931730>"]], "processes": 2, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "6c23ea983783cc2caeb64bb75c9e87e52127964a97224a259c3c1de8a4f2130f", "warmup_time": -1}, "probabilistic.Compute_small.peakmem_xskillscore_probabilistic_small": {"code": "class Compute_small:\n    @parameterized('metric', PROBABILISTIC_METRICS)\n    def peakmem_xskillscore_probabilistic_small(self, metric):\n        \"\"\"Take time for xskillscore.metric.\"\"\"\n        if metric is crps_gaussian:\n            mu = 0.5\n            sig = 0.2\n            metric(self.obs['tos'], mu, sig)\n        elif metric is crps_quadrature:\n            if not including_crps_quadrature:\n                pass\n            else:\n                xmin, xmax, tol = -10, 10, 1e-6\n                cdf_or_dist = norm\n                metric(self.obs['tos'], cdf_or_dist, xmin, xmax, tol)\n        elif metric is crps_ensemble:\n            metric(self.obs['tos'], self.fct['tos'])\n        elif metric is threshold_brier_score:\n            threshold = 0.5\n            metric(self.obs['tos'], self.fct['tos'], threshold)\n        elif metric is brier_score:\n            metric(\n                self.obs['tos'] > 0.5, (self.fct['tos'] > 0.5).mean('member')\n            )\n\n    def setup(self, *args, **kwargs):\n        self.make_ds(nmember, 90, 45)  # 4 degree grid", "name": "probabilistic.Compute_small.peakmem_xskillscore_probabilistic_small", "param_names": ["m"], "params": [["<function xr_crps_ensemble at 0x7f708e9fbc80>", "<function xr_crps_gaussian at 0x7f70a323a400>", "<function xr_crps_quadrature at 0x7f70949538c8>", "<function xr_brier_score at 0x7f708a931a60>", "<function xr_threshold_brier_score at 0x7f708a931730>"]], "timeout": 600, "type": "peakmemory", "unit": "bytes", "version": "62c341b83cb39ede3b4acff8fc18064f634190e1c29cbca8aa1552578b8a2887"}, "probabilistic.Compute_small.time_xskillscore_probabilistic_small": {"code": "class Compute_small:\n    @parameterized('metric', PROBABILISTIC_METRICS)\n    def time_xskillscore_probabilistic_small(self, metric):\n        \"\"\"Take time for xskillscore.metric.\"\"\"\n        if metric is crps_gaussian:\n            mu = 0.5\n            sig = 0.2\n            metric(self.obs['tos'], mu, sig)\n        elif metric is crps_quadrature:\n            if not including_crps_quadrature:\n                pass\n            else:\n                xmin, xmax, tol = -10, 10, 1e-6\n                cdf_or_dist = norm\n                metric(self.obs['tos'], cdf_or_dist, xmin, xmax, tol)\n        elif metric is crps_ensemble:\n            metric(self.obs['tos'], self.fct['tos'])\n        elif metric is threshold_brier_score:\n            threshold = 0.5\n            metric(self.obs['tos'], self.fct['tos'], threshold)\n        elif metric is brier_score:\n            metric(\n                self.obs['tos'] > 0.5, (self.fct['tos'] > 0.5).mean('member')\n            )\n\n    def setup(self, *args, **kwargs):\n        self.make_ds(nmember, 90, 45)  # 4 degree grid", "min_run_count": 2, "name": "probabilistic.Compute_small.time_xskillscore_probabilistic_small", "number": 0, "param_names": ["m"], "params": [["<function xr_crps_ensemble at 0x7f708e9fbc80>", "<function xr_crps_gaussian at 0x7f70a323a400>", "<function xr_crps_quadrature at 0x7f70949538c8>", "<function xr_brier_score at 0x7f708a931a60>", "<function xr_threshold_brier_score at 0x7f708a931730>"]], "processes": 2, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "9fe2e43fff1d2fe7f5fb0c2d46ccd7bdb8b8b9e5d65cfd61b5777744bfb35514", "warmup_time": -1}}, "machines": {"ray-MS-7B43": {"arch": "x86_64", "cpu": "Intel(R) Core(TM) i5-8600K CPU @ 3.60GHz", "machine": "ray-MS-7B43", "num_cpu": "6", "os": "Linux 5.0.0-27-generic", "ram": "16361736", "version": 1}}, "tags": {}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}